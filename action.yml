name: 'Docker Push to Github'
description: 'Build and push an image to ghcr'
inputs:
  azure_client_id:
    required: true
  azure_client_secret:
    required: true
  azure_subscription_id:
    required: true
  azure_tenant_id:
    required: true
  azure_webapp_name:
    required: true
  resource_group:
    required: true
  deployment_slot:
    required: true
  image:
    required: false
  package:
    required: false
  ad_app_id:
    required: false

runs:
  using: "composite"
  steps:  
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ inputs.azure_client_id }}",
              "clientSecret": "${{ inputs.azure_client_secret }}",
              "subscriptionId": "${{ inputs.azure_subscription_id }}",
              "tenantId": "${{ inputs.azure_tenant_id }}",
              "resourceManagerEndpointUrl": "https://management.azure.com/"
            }
      - name: Clean names
        shell: bash
        run: |
          slot_name=$(echo '${{ inputs.deployment_slot }}' | sed 's/[^A-Za-z0-9-]/-/g')
          echo "slot_name=$slot_name" >> $GITHUB_ENV
          
      - name: Create a new web app slot if it doesn't exist
        if: (github.event_name == 'pull_request' || github.ref_type == 'tag') && inputs.deployment_slot
        shell: bash
        run: |
          exists=$(az webapp deployment slot list --name ${{ inputs.azure_webapp_name }} --resource-group ${{ inputs.resource_group }} --query "[?name=='${{ env.slot_name }}'].name" -o tsv)
          if [ -z "$exists" ]; then
              echo "Slot does not exist"
              az webapp deployment slot create --name ${{ inputs.azure_webapp_name }} --resource-group ${{ inputs.resource_group }} --slot $slot_name --configuration-source ${{ inputs.azure_webapp_name }}
          else
              echo "Slot already exists"
          fi
          
      - name: Get publish profile
        shell: bash
        id: profile
        run: |
          if [ -z "${{ env.slot_name }}" ]; then
            publish_profile=$(az webapp deployment list-publishing-profiles --name ${{ inputs.azure_webapp_name }} --resource-group ${{ inputs.resource_group }} --xml) 
          else
            publish_profile=$(az webapp deployment list-publishing-profiles --name ${{ inputs.azure_webapp_name }} --resource-group ${{ inputs.resource_group }} --slot ${{ env.slot_name }} --xml) 
          fi
          app_url=$(echo $publish_profile | sed -nr 's/.*destinationAppUrl="([^"]+).*/\1/p')
          echo "publish_profile=${publish_profile}" >> $GITHUB_OUTPUT
          echo "url=${app_url/http:/https:}" >> $GITHUB_OUTPUT

      - name: Update AD
        if:  "${{ inputs.ad_app_id != '' }}"
        shell: bash
        run: |
          uri='${{ steps.profile.outputs.url }}/signin-oidc'          
          redirectUris=$(az ad app show --id ${{ inputs.ad_app_id }} | jq -c '.web.redirectUris + ["'$uri'"] | unique |  {"web": {"redirectUris": . }}')
          az rest --method PATCH --uri 'https://graph.microsoft.com/v1.0/applications/${{ inputs.ad_app_id }}' --headers 'Content-Type=application/json' --body "$redirectUris"
      
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ inputs.azure_webapp_name }}
          publish-profile: ${{ inputs.azure_webapp_publish_profile }}
          slot-name: ${{ env.slot_name }}
          package: ${{ inputs.package }}
          images: ${{ inputs.image }}
          resource-group-name: ${{ inputs.resource_group }}
          
      - uses: mshick/add-pr-comment@v2
        if: always()
        with:
          message: |
            Your PR has been deployed to ${{ steps.profile.outputs.url }}
          message-failure: |
            Your PR failed to deploy. Please check the logs.
          refresh-message-position: true
